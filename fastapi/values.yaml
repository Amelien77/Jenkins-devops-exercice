replicaCount: 1

image:
  pullPolicy: IfNotPresent

imagePullSecrets: []

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
securityContext: {}

services:
  castservice:
    image:
      repository: ameliendevops/cast-service
      tag: "latest"
    service:
      type: NodePort
      port: 8000
    volumeMounts:
      - name: cast-service-claim
        mountPath: /app/
    volumes:
      - name: cast-service-claim
        persistentVolumeClaim:
          claimName: cast-service-claim  # Nom générique pour les PVCs, adapté pour chaque environnement
    env:
      - name: DATABASE_URI
        value: "postgresql://cast_db_username:cast_db_password@cast_db/cast_db_dev"

  movieservice:
    image:
      repository: ameliendevops/movie-service
      tag: "latest"
    service:
      type: NodePort
      port: 8000
    volumeMounts:
      - name: movie-service-claim
        mountPath: /app/
    volumes:
      - name: movie-service-claim
        persistentVolumeClaim:
          claimName: movie-service-claim  # Nom générique pour les PVCs, adapté pour chaque environnement
    env:
      - name: CAST_SERVICE_HOST_URL
        value: "http://cast-service:8000/api/v1/casts/"
      - name: DATABASE_URI
        value: "postgresql://movie_db_username:movie_db_password@movie_db/movie_db_dev"

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

resources: {}

livenessProbe:
  httpGet:
    path: /
    port: http

readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}
